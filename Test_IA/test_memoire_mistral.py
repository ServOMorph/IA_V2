import sys
import os
import time
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from ollama_api import query_ollama

# ==== Configuration du test m√©moire ====
INSTRUCTION_INITIALE = "Souviens-toi que la banane est bleue."
QUESTION_RAPPEL = "Quelle couleur est la banane ?"
ATTENDU = "bleue"

INTERVALLE_RAPPEL = 10      # tous les X messages, on teste la m√©moire
MAX_TOURS = 200             # limite pour ne pas boucler √† l‚Äôinfini
BOURRAGE_TEXTE = "Voici une information quelconque sans importance, num√©ro {}."

# ==== Fonction utilitaire ====
def est_reponse_correcte(r√©ponse, attendu):
    return attendu.lower() in r√©ponse.lower()

def estimer_tokens(messages):
    total_mots = sum(len(m.split()) for m in messages)
    return int(total_mots * 1.5)  # estimation : 1.5 tokens / mot

# ==== Lancement du test ====
def test_memoire():
    historique = [f"[user] {INSTRUCTION_INITIALE}"]
    r√©ponses = []
    rapport = []

    print("üìå D√©but du test de m√©moire contextuelle Mistral")
    print("üì• Instruction initiale : Souviens-toi que la banane est bleue.\n")

    for tour in range(1, MAX_TOURS + 1):
        if tour % INTERVALLE_RAPPEL == 0:
            prompt = QUESTION_RAPPEL
            print(f"\nüîÑ Test de m√©moire √† l‚Äôit√©ration {tour}...")
        else:
            prompt = BOURRAGE_TEXTE.format(tour)

        historique.append(f"[user] {prompt}")
        context_concat√©n√© = "\n".join(historique)
        r√©ponse = query_ollama(context_concat√©n√©)
        r√©ponses.append(r√©ponse.strip())
        historique.append(f"[assistant] {r√©ponse.strip()}")

        if tour % INTERVALLE_RAPPEL == 0:
            if est_reponse_correcte(r√©ponse, ATTENDU):
                print(f"‚úÖ M√©moire OK (r√©ponse : {r√©ponse.strip()[:60]}...)")
                rapport.append(f"[{tour}] OK ‚Äî {r√©ponse.strip()}")
            else:
                print(f"‚ùå M√©moire perdue (r√©ponse : {r√©ponse.strip()[:60]}...)")
                rapport.append(f"[{tour}] √âCHEC ‚Äî {r√©ponse.strip()}")
                break

    tokens_estimes = estimer_tokens(historique)
    print("\nüìä R√©sum√© du test")
    print(f"üß† Dernier rappel r√©ussi : {tour - INTERVALLE_RAPPEL}")
    print(f"üßÆ Estimation du total de tokens : ~{tokens_estimes}")
    print(f"üóÉÔ∏è Total de tours : {tour}\n")

    # Enregistrement du rapport
    dossier = os.path.dirname(__file__)
    chemin = os.path.join(dossier, "rapport_test_memoire_mistral.txt")
    with open(chemin, "w", encoding="utf-8") as f:
        f.write(f"Test de m√©moire contextuelle ‚Äì {datetime.now()}\n")
        f.write(f"Instruction initiale : {INSTRUCTION_INITIALE}\n")
        f.write(f"Test toutes les {INTERVALLE_RAPPEL} it√©rations\n\n")
        f.write("\n".join(rapport))
        f.write(f"\n\nDernier tour avec m√©moire intacte : {tour - INTERVALLE_RAPPEL}")
        f.write(f"\nEstimation du nombre de tokens : ~{tokens_estimes}")

    print(f"‚úÖ Rapport enregistr√© dans : {chemin}")

# ==== Ex√©cution ====
if __name__ == "__main__":
    test_memoire()
